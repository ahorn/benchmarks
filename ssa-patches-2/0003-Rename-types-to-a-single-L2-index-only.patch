From 8f247241d85189c20345a0574463f689d5022734 Mon Sep 17 00:00:00 2001
From: Michael Tautschnig <mt@debian.org>
Date: Wed, 25 Jun 2014 12:36:58 +0100
Subject: [PATCH 03/12] Rename types to a single L2 index only

---
 regression/cbmc/Malloc18/test.desc  |  2 +-
 src/analyses/goto_check.cpp         |  2 +
 src/goto-symex/goto_symex_state.cpp | 90 ++++++++++++++++++++++++++++++-------
 src/goto-symex/goto_symex_state.h   |  6 ++-
 src/util/std_expr.h                 |  7 +++
 5 files changed, 90 insertions(+), 17 deletions(-)

diff --git a/regression/cbmc/Malloc18/test.desc b/regression/cbmc/Malloc18/test.desc
index a27d6e3..9c96469 100644
--- a/regression/cbmc/Malloc18/test.desc
+++ b/regression/cbmc/Malloc18/test.desc
@@ -1,4 +1,4 @@
-KNOWNBUG
+CORE
 main.c
 
 ^EXIT=0$
diff --git a/src/analyses/goto_check.cpp b/src/analyses/goto_check.cpp
index c66a10f..c8104b6 100644
--- a/src/analyses/goto_check.cpp
+++ b/src/analyses/goto_check.cpp
@@ -1543,6 +1543,8 @@ void goto_checkt::goto_check(goto_functiont &goto_function)
           goto_programt::targett t=new_code.add_instruction(ASSIGN);
           exprt address_of_expr=address_of_exprt(variable);
           exprt lhs=symbol_expr(ns.lookup(CPROVER_PREFIX "dead_object"));
+          if(!base_type_eq(lhs.type(), address_of_expr.type(), ns))
+            address_of_expr.make_typecast(lhs.type());
           exprt rhs=if_exprt(
             side_effect_expr_nondett(bool_typet()), address_of_expr, lhs, lhs.type());
           t->location=i.location;
diff --git a/src/goto-symex/goto_symex_state.cpp b/src/goto-symex/goto_symex_state.cpp
index 517d4c3..98f1cfa 100644
--- a/src/goto-symex/goto_symex_state.cpp
+++ b/src/goto-symex/goto_symex_state.cpp
@@ -389,13 +389,13 @@ void goto_symex_statet::assignment(
   const namespacet &ns,
   bool record_value)
 {
-  // the type might need renaming
-  rename(lhs.type(), ns);
-
   // identifier should be l0 or l1, make sure it's l1
   rename(lhs, ns, L1);
   irep_idt l1_identifier=lhs.get_identifier();
 
+  // the type might need renaming
+  rename(lhs.type(), l1_identifier, ns);
+  lhs.update_type();
   assert_l1_renaming(lhs);
 
   #if 0  
@@ -540,8 +540,6 @@ void goto_symex_statet::rename(
   levelt level)
 {
   // rename all the symbols with their last known value
-  
-  rename(expr.type(), ns, level);
 
   if(expr.id()==ID_symbol &&
      expr.get_bool(ID_C_SSA_symbol))
@@ -549,10 +547,16 @@ void goto_symex_statet::rename(
     ssa_exprt &ssa=to_ssa_expr(expr);
 
     if(level==L0 || level==L1)
+    {
       set_ssa_indices(ssa, ns, level);
+      rename(expr.type(), ssa.get_identifier(), ns, level);
+      ssa.update_type();
+    }
     else if(level==L2)
     {
       set_ssa_indices(ssa, ns, L1);
+      rename(expr.type(), ssa.get_identifier(), ns, level);
+      ssa.update_type();
 
       if(l2_thread_read_encoding(ssa, ns))
       {
@@ -575,13 +579,20 @@ void goto_symex_statet::rename(
           set_ssa_indices(ssa, ns, L2);
       }
     }
-    
   }
   else if(expr.id()==ID_symbol)
   {
     // we never rename function symbols
     if(ns.follow(expr.type()).id()==ID_code)
+    {
+      rename(
+        expr.type(),
+        to_symbol_expr(expr).get_identifier(),
+        ns,
+        level);
+
       return;
+    }
 
     expr=ssa_exprt(expr);
     rename(expr, ns, level);
@@ -590,12 +601,26 @@ void goto_symex_statet::rename(
   {
     assert(expr.operands().size()==1);
     rename_address(expr.op0(), ns, level);
+    assert(expr.type().id()==ID_pointer);
+    expr.type().subtype()=expr.op0().type();
   }
   else
   {
+    // this could go wrong, but we would have to re-typecheck ...
+    rename(expr.type(), irep_idt(), ns, level);
+
     // do this recursively
     Forall_operands(it, expr)
       rename(*it, ns, level);
+
+    // some fixes
+    if(expr.id()==ID_with)
+      expr.type()=to_with_expr(expr).old().type();
+    else if(expr.id()==ID_if)
+    {
+      assert(to_if_expr(expr).true_case().type()==to_if_expr(expr).false_case().type());
+      expr.type()=to_if_expr(expr).true_case().type();
+    }
   }
 }
 
@@ -800,8 +825,6 @@ void goto_symex_statet::rename_address(
   const namespacet &ns,
   levelt level)
 {
-  rename(expr.type(), ns, level);
-
   if(expr.id()==ID_symbol &&
      expr.get_bool(ID_C_SSA_symbol))
   {
@@ -809,6 +832,9 @@ void goto_symex_statet::rename_address(
 
     // only do L1!
     set_ssa_indices(ssa, ns, L1);
+
+    rename(expr.type(), ssa.get_identifier(), ns, level);
+    ssa.update_type();
   }
   else if(expr.id()==ID_symbol)
   {
@@ -819,11 +845,14 @@ void goto_symex_statet::rename_address(
   {
     if(expr.id()==ID_index)
     {
-      assert(expr.operands().size()==2);
-      rename_address(expr.op0(), ns, level);
+      index_exprt &index_expr=to_index_expr(expr);
+
+      rename_address(index_expr.array(), ns, level);
+      assert(index_expr.array().type().id()==ID_array);
+      expr.type()=index_expr.array().type().subtype();
 
       // the index is not an address
-      rename(expr.op1(), ns, level);
+      rename(index_expr.index(), ns, level);
     }
     else if(expr.id()==ID_if)
     {
@@ -832,13 +861,26 @@ void goto_symex_statet::rename_address(
       rename(if_expr.cond(), ns, level);
       rename_address(if_expr.true_case(), ns, level);
       rename_address(if_expr.false_case(), ns, level);
+
+      if_expr.type()=if_expr.true_case().type();
     }
     else if(expr.id()==ID_member)
     {
-      rename_address(to_member_expr(expr).struct_op(), ns, level);
+      member_exprt &member_expr=to_member_expr(expr);
+
+      rename_address(member_expr.struct_op(), ns, level);
+      const struct_union_typet &su_type=
+        to_struct_union_type(member_expr.struct_op().type());
+      const struct_union_typet::componentt &comp=
+        su_type.get_component(member_expr.get_component_name());
+      assert(comp.is_not_nil());
+      expr.type()=comp.type();
     }
     else
     {
+      // this could go wrong, but we would have to re-typecheck ...
+      rename(expr.type(), irep_idt(), ns, level);
+
       // do this recursively; we assume here
       // that all the operands are addresses
       Forall_operands(it, expr)
@@ -861,15 +903,29 @@ Function: goto_symex_statet::rename
 
 void goto_symex_statet::rename(
   typet &type,
+  const irep_idt &l1_identifier,
   const namespacet &ns,
   levelt level)
 {
   // rename all the symbols with their last known value
   // to the given level
 
+  std::pair<l1_typest::iterator, bool> l1_type_entry;
+  if(level==L2 &&
+     !l1_identifier.empty())
+  {
+    l1_type_entry=l1_types.insert(std::make_pair(l1_identifier, type));
+
+    if(!l1_type_entry.second)
+    {
+      type=l1_type_entry.first->second;
+      return;
+    }
+  }
+
   if(type.id()==ID_array)
   {
-    rename(type.subtype(), ns, level);
+    rename(type.subtype(), irep_idt(), ns, level);
     rename(to_array_type(type).size(), ns, level);
   }
   else if(type.id()==ID_struct ||
@@ -883,7 +939,7 @@ void goto_symex_statet::rename(
         it=components.begin();
         it!=components.end();
         ++it)
-      rename(it->type(), ns, level);
+      rename(it->type(), irep_idt(), ns, level);
   }
   else if(type.id()==ID_pointer)
   {
@@ -895,8 +951,12 @@ void goto_symex_statet::rename(
     const symbolt &symbol=
       ns.lookup(to_symbol_type(type).get_identifier());
     type=symbol.type;
-    rename(type, ns, level);
+    rename(type, l1_identifier, ns, level);
   }
+
+  if(level==L2 &&
+     !l1_identifier.empty())
+    l1_type_entry.first->second=type;
 }
 
 /*******************************************************************\
diff --git a/src/goto-symex/goto_symex_state.h b/src/goto-symex/goto_symex_state.h
index 25d6106..9715dce 100644
--- a/src/goto-symex/goto_symex_state.h
+++ b/src/goto-symex/goto_symex_state.h
@@ -145,7 +145,11 @@ public:
   void get_original_name(exprt &expr) const;
   void get_original_name(typet &type) const;
 protected:
-  void rename(typet &type, const namespacet &ns, levelt level=L2);
+  void rename(
+    typet &type,
+    const irep_idt &l1_identifier,
+    const namespacet &ns,
+    levelt level=L2);
   void rename_address(exprt &expr, const namespacet &ns, levelt level);
 
   void set_ssa_indices(ssa_exprt &expr, const namespacet &ns, levelt level=L2);
diff --git a/src/util/std_expr.h b/src/util/std_expr.h
index 45a73ef..41d6189 100644
--- a/src/util/std_expr.h
+++ b/src/util/std_expr.h
@@ -3142,6 +3142,13 @@ public:
     update_identifier();
   }
 
+  inline void update_type()
+  {
+    // TODO: field sensitive SSA requires more work here
+    assert(static_cast<const exprt &>(find(ID_expression)).id()==ID_symbol);
+    static_cast<exprt &>(add(ID_expression)).type()=type();
+  }
+
   inline const exprt &get_original_expr() const
   {
     return static_cast<const exprt &>(find(ID_expression));
-- 
2.0.1

