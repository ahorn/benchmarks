From f6e6c0ff79a3b0669feeb4fee3eda3c61f41cc68 Mon Sep 17 00:00:00 2001
From: Michael Tautschnig <mt@debian.org>
Date: Fri, 18 Oct 2013 17:04:42 +0100
Subject: [PATCH 09/18] No phi nodes across different threads

---
 regression/cbmc-concurrency/constant_prop1/main.c  | 37 ++++++++++++++++++++++
 .../cbmc-concurrency/constant_prop1/test.desc      |  9 ++++++
 src/goto-symex/symex_goto.cpp                      |  8 +++++
 3 files changed, 54 insertions(+)
 create mode 100644 regression/cbmc-concurrency/constant_prop1/main.c
 create mode 100644 regression/cbmc-concurrency/constant_prop1/test.desc

diff --git a/regression/cbmc-concurrency/constant_prop1/main.c b/regression/cbmc-concurrency/constant_prop1/main.c
new file mode 100644
index 0000000..7576ea3
--- /dev/null
+++ b/regression/cbmc-concurrency/constant_prop1/main.c
@@ -0,0 +1,37 @@
+void thread_c(int t)
+{
+  int l=t;
+  __CPROVER_assert(t==42, "t==42 by constant propagation");
+}
+
+void thread_nc(int t)
+{
+  int l=t;
+  __CPROVER_assert(t<42, "t<42");
+}
+
+static void spawner_c(int constant)
+{
+__CPROVER_ASYNC_1:
+  thread_c(constant);
+}
+
+static void spawner_nc(int not_constant)
+{
+__CPROVER_ASYNC_1:
+  thread_nc(not_constant);
+}
+
+int main()
+{
+  int x;
+  __CPROVER_assume(x<42);
+
+  // spawner_nc(x);
+
+  if(x)
+    spawner_c(42);
+
+  return 0;
+}
+
diff --git a/regression/cbmc-concurrency/constant_prop1/test.desc b/regression/cbmc-concurrency/constant_prop1/test.desc
new file mode 100644
index 0000000..2ae90c4
--- /dev/null
+++ b/regression/cbmc-concurrency/constant_prop1/test.desc
@@ -0,0 +1,9 @@
+CORE
+main.c
+
+^EXIT=0$
+^SIGNAL=0$
+^VERIFICATION SUCCESSFUL$
+^Generated 1 VCC(s), 0 remaining after simplification$
+--
+^warning: ignoring
diff --git a/src/goto-symex/symex_goto.cpp b/src/goto-symex/symex_goto.cpp
index 5984d2d..316970c 100644
--- a/src/goto-symex/symex_goto.cpp
+++ b/src/goto-symex/symex_goto.cpp
@@ -323,6 +323,14 @@ void goto_symext::phi_function(
     if(dest_state.atomic_section_id==0 &&
        dest_state.threads.size()>=2 && symbol.is_shared())
       continue; // no phi nodes for shared stuff
+
+    // don't merge (thread-)locals across different threads, which
+    // may have been introduced by symex_start_thread (and will
+    // only later be removed from level2.current_names by pop_frame
+    // once the thread is executed)
+    if(!it->get_level_0().empty() &&
+       it->get_level_0()!=i2string(dest_state.source.thread_nr))
+      continue;
     
     exprt goto_state_rhs=*it, dest_state_rhs=*it;
 
-- 
2.5.0

