From e65336daa423fc0c5005ee588cb7aac6851bd69c Mon Sep 17 00:00:00 2001
From: Michael Tautschnig <mt@debian.org>
Date: Wed, 25 Jun 2014 12:36:58 +0100
Subject: [PATCH 07/18] Rename types to a single L2 index only

---
 regression/cbmc/Malloc18/test.desc  |   2 +-
 src/analyses/goto_check.cpp         |   2 +
 src/goto-symex/goto_symex_state.cpp | 106 ++++++++++++++++++++++++++++++------
 src/goto-symex/goto_symex_state.h   |   6 +-
 src/goto-symex/symex_clean_expr.cpp |  18 ++++++
 src/goto-symex/symex_decl.cpp       |  18 +++---
 src/goto-symex/symex_other.cpp      |   9 ++-
 src/util/ssa_expr.h                 |   5 ++
 8 files changed, 137 insertions(+), 29 deletions(-)

diff --git a/regression/cbmc/Malloc18/test.desc b/regression/cbmc/Malloc18/test.desc
index a27d6e3..9c96469 100644
--- a/regression/cbmc/Malloc18/test.desc
+++ b/regression/cbmc/Malloc18/test.desc
@@ -1,4 +1,4 @@
-KNOWNBUG
+CORE
 main.c
 
 ^EXIT=0$
diff --git a/src/analyses/goto_check.cpp b/src/analyses/goto_check.cpp
index 219971a..d4a6939 100644
--- a/src/analyses/goto_check.cpp
+++ b/src/analyses/goto_check.cpp
@@ -1547,6 +1547,8 @@ void goto_checkt::goto_check(goto_functiont &goto_function)
           goto_programt::targett t=new_code.add_instruction(ASSIGN);
           exprt address_of_expr=address_of_exprt(variable);
           exprt lhs=ns.lookup(CPROVER_PREFIX "dead_object").symbol_expr();
+          if(!base_type_eq(lhs.type(), address_of_expr.type(), ns))
+            address_of_expr.make_typecast(lhs.type());
           exprt rhs=if_exprt(
             side_effect_expr_nondett(bool_typet()), address_of_expr, lhs, lhs.type());
           t->source_location=i.source_location;
diff --git a/src/goto-symex/goto_symex_state.cpp b/src/goto-symex/goto_symex_state.cpp
index 91bff04..60a8763 100644
--- a/src/goto-symex/goto_symex_state.cpp
+++ b/src/goto-symex/goto_symex_state.cpp
@@ -292,13 +292,14 @@ void goto_symex_statet::assignment(
   bool rhs_is_simplified,
   bool record_value)
 {
-  // the type might need renaming
-  rename(lhs.type(), ns);
-
   // identifier should be l0 or l1, make sure it's l1
   rename(lhs, ns, L1);
   irep_idt l1_identifier=lhs.get_identifier();
 
+  // the type might need renaming
+  rename(lhs.type(), l1_identifier, ns);
+  lhs.update_type();
+
   #if 0  
   assert(l1_identifier != get_original_name(l1_identifier)
       || l1_identifier=="goto_symex::\\guard"
@@ -435,8 +436,6 @@ void goto_symex_statet::rename(
   levelt level)
 {
   // rename all the symbols with their last known value
-  
-  rename(expr.type(), ns, level);
 
   if(expr.id()==ID_symbol &&
      expr.get_bool(ID_C_SSA_symbol))
@@ -444,10 +443,16 @@ void goto_symex_statet::rename(
     ssa_exprt &ssa=to_ssa_expr(expr);
 
     if(level==L0 || level==L1)
+    {
       set_ssa_indices(ssa, ns, level);
+      rename(expr.type(), ssa.get_identifier(), ns, level);
+      ssa.update_type();
+    }
     else if(level==L2)
     {
       set_ssa_indices(ssa, ns, L1);
+      rename(expr.type(), ssa.get_identifier(), ns, level);
+      ssa.update_type();
 
       if(l2_thread_read_encoding(ssa, ns))
       {
@@ -470,13 +475,20 @@ void goto_symex_statet::rename(
           set_ssa_indices(ssa, ns, L2);
       }
     }
-    
   }
   else if(expr.id()==ID_symbol)
   {
     // we never rename function symbols
     if(ns.follow(expr.type()).id()==ID_code)
+    {
+      rename(
+        expr.type(),
+        to_symbol_expr(expr).get_identifier(),
+        ns,
+        level);
+
       return;
+    }
 
     expr=ssa_exprt(expr);
     rename(expr, ns, level);
@@ -485,12 +497,26 @@ void goto_symex_statet::rename(
   {
     assert(expr.operands().size()==1);
     rename_address(expr.op0(), ns, level);
+    assert(expr.type().id()==ID_pointer);
+    expr.type().subtype()=expr.op0().type();
   }
   else
   {
+    // this could go wrong, but we would have to re-typecheck ...
+    rename(expr.type(), irep_idt(), ns, level);
+
     // do this recursively
     Forall_operands(it, expr)
       rename(*it, ns, level);
+
+    // some fixes
+    if(expr.id()==ID_with)
+      expr.type()=to_with_expr(expr).old().type();
+    else if(expr.id()==ID_if)
+    {
+      assert(to_if_expr(expr).true_case().type()==to_if_expr(expr).false_case().type());
+      expr.type()=to_if_expr(expr).true_case().type();
+    }
   }
 }
 
@@ -705,8 +731,6 @@ void goto_symex_statet::rename_address(
   const namespacet &ns,
   levelt level)
 {
-  rename(expr.type(), ns, level);
-
   if(expr.id()==ID_symbol &&
      expr.get_bool(ID_C_SSA_symbol))
   {
@@ -714,6 +738,9 @@ void goto_symex_statet::rename_address(
 
     // only do L1!
     set_ssa_indices(ssa, ns, L1);
+
+    rename(expr.type(), ssa.get_identifier(), ns, level);
+    ssa.update_type();
   }
   else if(expr.id()==ID_symbol)
   {
@@ -724,11 +751,14 @@ void goto_symex_statet::rename_address(
   {
     if(expr.id()==ID_index)
     {
-      assert(expr.operands().size()==2);
-      rename_address(expr.op0(), ns, level);
+      index_exprt &index_expr=to_index_expr(expr);
+
+      rename_address(index_expr.array(), ns, level);
+      assert(index_expr.array().type().id()==ID_array);
+      expr.type()=index_expr.array().type().subtype();
 
       // the index is not an address
-      rename(expr.op1(), ns, level);
+      rename(index_expr.index(), ns, level);
     }
     else if(expr.id()==ID_if)
     {
@@ -737,13 +767,34 @@ void goto_symex_statet::rename_address(
       rename(if_expr.cond(), ns, level);
       rename_address(if_expr.true_case(), ns, level);
       rename_address(if_expr.false_case(), ns, level);
+
+      if_expr.type()=if_expr.true_case().type();
     }
     else if(expr.id()==ID_member)
     {
-      rename_address(to_member_expr(expr).struct_op(), ns, level);
+      member_exprt &member_expr=to_member_expr(expr);
+
+      rename_address(member_expr.struct_op(), ns, level);
+
+      // type might not have been renamed in case of nesting of
+      // structs and pointers/arrays
+      if(member_expr.struct_op().type().id()!=ID_symbol)
+      {
+        const struct_union_typet &su_type=
+          to_struct_union_type(member_expr.struct_op().type());
+        const struct_union_typet::componentt &comp=
+          su_type.get_component(member_expr.get_component_name());
+        assert(comp.is_not_nil());
+        expr.type()=comp.type();
+      }
+      else
+        rename(expr.type(), irep_idt(), ns, level);
     }
     else
     {
+      // this could go wrong, but we would have to re-typecheck ...
+      rename(expr.type(), irep_idt(), ns, level);
+
       // do this recursively; we assume here
       // that all the operands are addresses
       Forall_operands(it, expr)
@@ -766,15 +817,29 @@ Function: goto_symex_statet::rename
 
 void goto_symex_statet::rename(
   typet &type,
+  const irep_idt &l1_identifier,
   const namespacet &ns,
   levelt level)
 {
   // rename all the symbols with their last known value
   // to the given level
 
+  std::pair<l1_typest::iterator, bool> l1_type_entry;
+  if(level==L2 &&
+     !l1_identifier.empty())
+  {
+    l1_type_entry=l1_types.insert(std::make_pair(l1_identifier, type));
+
+    if(!l1_type_entry.second)
+    {
+      type=l1_type_entry.first->second;
+      return;
+    }
+  }
+
   if(type.id()==ID_array)
   {
-    rename(type.subtype(), ns, level);
+    rename(type.subtype(), irep_idt(), ns, level);
     rename(to_array_type(type).size(), ns, level);
   }
   else if(type.id()==ID_struct ||
@@ -788,20 +853,27 @@ void goto_symex_statet::rename(
         it=components.begin();
         it!=components.end();
         ++it)
-      rename(it->type(), ns, level);
+      // be careful, or it might get cyclic
+      if(it->type().id()==ID_array)
+        rename(to_array_type(it->type()).size(), ns, level);
+      else if(it->type().id()!=ID_pointer)
+        rename(it->type(), irep_idt(), ns, level);
   }
   else if(type.id()==ID_pointer)
   {
-    // rename(type.subtype(), ns);
-    // don't do this, or it might get cyclic
+    rename(type.subtype(), irep_idt(), ns, level);
   }
   else if(type.id()==ID_symbol)
   {
     const symbolt &symbol=
       ns.lookup(to_symbol_type(type).get_identifier());
     type=symbol.type;
-    rename(type, ns, level);
+    rename(type, l1_identifier, ns, level);
   }
+
+  if(level==L2 &&
+     !l1_identifier.empty())
+    l1_type_entry.first->second=type;
 }
 
 /*******************************************************************\
diff --git a/src/goto-symex/goto_symex_state.h b/src/goto-symex/goto_symex_state.h
index e296332..9ed7379 100644
--- a/src/goto-symex/goto_symex_state.h
+++ b/src/goto-symex/goto_symex_state.h
@@ -145,6 +145,11 @@ public:
 
   // performs renaming _up to_ the given level
   void rename(exprt &expr, const namespacet &ns, levelt level=L2);
+  void rename(
+    typet &type,
+    const irep_idt &l1_identifier,
+    const namespacet &ns,
+    levelt level=L2);
   
   void assignment(
     ssa_exprt &lhs, // L0/L1
@@ -161,7 +166,6 @@ public:
   void get_original_name(exprt &expr) const;
   void get_original_name(typet &type) const;
 protected:
-  void rename(typet &type, const namespacet &ns, levelt level=L2);
   void rename_address(exprt &expr, const namespacet &ns, levelt level);
 
   void set_ssa_indices(ssa_exprt &expr, const namespacet &ns, levelt level=L2);
diff --git a/src/goto-symex/symex_clean_expr.cpp b/src/goto-symex/symex_clean_expr.cpp
index 9355c46..79908cf 100644
--- a/src/goto-symex/symex_clean_expr.cpp
+++ b/src/goto-symex/symex_clean_expr.cpp
@@ -60,6 +60,15 @@ void goto_symext::process_array_expr_rec(
     expr.swap(tmp);
     process_array_expr_rec(expr, type);
   }
+  else if(expr.id()==ID_symbol &&
+          expr.get_bool(ID_C_SSA_symbol) &&
+          to_ssa_expr(expr).get_original_expr().id()==ID_index)
+  {
+    const ssa_exprt &ssa=to_ssa_expr(expr);
+    const index_exprt &index_expr=to_index_expr(ssa.get_original_expr());
+    exprt tmp=index_expr.array();
+    expr.swap(tmp);
+  }
   else
     Forall_operands(it, expr)
       process_array_expr_rec(*it, it->type());
@@ -122,6 +131,15 @@ void goto_symext::process_array_expr(exprt &expr)
     expr.swap(tmp);
     process_array_expr(expr);
   }
+  else if(expr.id()==ID_symbol &&
+          expr.get_bool(ID_C_SSA_symbol) &&
+          to_ssa_expr(expr).get_original_expr().id()==ID_index)
+  {
+    const ssa_exprt &ssa=to_ssa_expr(expr);
+    const index_exprt &index_expr=to_index_expr(ssa.get_original_expr());
+    exprt tmp=index_expr.array();
+    expr.swap(tmp);
+  }
   else
     Forall_operands(it, expr)
       process_array_expr(*it);
diff --git a/src/goto-symex/symex_decl.cpp b/src/goto-symex/symex_decl.cpp
index 1c41040..1e2cafa 100644
--- a/src/goto-symex/symex_decl.cpp
+++ b/src/goto-symex/symex_decl.cpp
@@ -65,6 +65,11 @@ void goto_symext::symex_decl(statet &state, const symbol_exprt &expr)
   
   ssa_exprt ssa(expr);
   state.rename(ssa, ns, goto_symex_statet::L1);
+  const irep_idt &l1_identifier=ssa.get_identifier();
+
+  // rename type to L2
+  state.rename(ssa.type(), l1_identifier, ns);
+  ssa.update_type();
 
   // in case of pointers, put something into the value set
   if(ns.follow(expr.type()).id()==ID_pointer)
@@ -88,9 +93,6 @@ void goto_symext::symex_decl(statet &state, const symbol_exprt &expr)
     state.value_set.assign(ssa, rhs, ns, true, false);
   }
   
-  ssa_exprt ssa_lhs=to_ssa_expr(ssa);
-  const irep_idt &l1_identifier=ssa_lhs.get_identifier();
-
   // prevent propagation
   state.propagation.remove(l1_identifier);
 
@@ -99,20 +101,20 @@ void goto_symext::symex_decl(statet &state, const symbol_exprt &expr)
   // within the same L1 context
   if(state.level2.current_names.find(l1_identifier)==
      state.level2.current_names.end())
-    state.level2.current_names[l1_identifier]=std::make_pair(ssa_lhs, 0);
+    state.level2.current_names[l1_identifier]=std::make_pair(ssa, 0);
   state.level2.increase_counter(l1_identifier);
-  state.rename(ssa_lhs, ns);
-
+  state.rename(ssa, ns);
+  
   // we hide the declaration of auxiliary variables
   // and if the statement itself is hidden
   bool hidden=
-    ns.lookup(original_lhs.get_identifier()).is_auxiliary ||
+    ns.lookup(expr.get_identifier()).is_auxiliary ||
     state.top().hidden_function ||
     state.source.pc->source_location.get_hide();
   
   target.decl(
     state.guard.as_expr(),
-    ssa_lhs,
+    ssa,
     state.source,
     hidden?symex_targett::HIDDEN:symex_targett::STATE);
 }
diff --git a/src/goto-symex/symex_other.cpp b/src/goto-symex/symex_other.cpp
index 3cdd05b..4610d35 100644
--- a/src/goto-symex/symex_other.cpp
+++ b/src/goto-symex/symex_other.cpp
@@ -101,10 +101,13 @@ void goto_symext::symex_other(
     clean_code.op0()=d0;
     clean_code.op1()=d1;
     
-    clean_expr(clean_code, state, false);
+    clean_expr(clean_code.op0(), state, true);
+    clean_expr(clean_code.op1(), state, false);
     
     process_array_expr(clean_code.op0());
+    clean_expr(clean_code.op0(), state, true);
     process_array_expr(clean_code.op1());
+    clean_expr(clean_code.op1(), state, false);
     
 
     if(!base_type_eq(clean_code.op0().type(),
@@ -136,9 +139,11 @@ void goto_symext::symex_other(
     
     clean_code.op0()=d0;
 
-    clean_expr(clean_code, state, false);
+    clean_expr(clean_code.op0(), state, true);
+    clean_expr(clean_code.op1(), state, false);
     
     process_array_expr(clean_code.op0());
+    clean_expr(clean_code.op0(), state, true);
     
     const typet &op0_type=ns.follow(clean_code.op0().type());
     
diff --git a/src/util/ssa_expr.h b/src/util/ssa_expr.h
index 777790a..d65a491 100644
--- a/src/util/ssa_expr.h
+++ b/src/util/ssa_expr.h
@@ -32,6 +32,11 @@ public:
     update_identifier();
   }
 
+  inline void update_type()
+  {
+    static_cast<exprt &>(add(ID_expression)).type()=type();
+  }
+
   inline const exprt &get_original_expr() const
   {
     return static_cast<const exprt &>(find(ID_expression));
-- 
2.5.0

